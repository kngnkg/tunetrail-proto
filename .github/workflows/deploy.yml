name: Deploy

on:
  push:
    branches:
      - "main"
    paths:
    - "api/**"
    - "frontend/**"
    # - "infra/**" # infraディレクトリのみに変更があった場合はデプロイしない
    - ".github/workflows/deploy.yml"

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.4.6
  TF_WORKING_DIR: infra

jobs:
  # デプロイ準備ジョブ
  # 現行のタスク定義からイメージタグを取得する
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      api_image_tag: ${{ steps.get-api-tag.outputs.tag }}
      frontend_image_tag: ${{ steps.get-frontend-tag.outputs.tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # 以降のステップでAWS CLIを使用するため、AWSのクレデンシャル情報を設定する
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # APIのイメージタグを取得する
    - name: Get the latest API image tag
      id: get-api-tag
      run: |
        set -e
        result=$(aws ecs describe-task-definition --task-definition tunetrail-api --query 'taskDefinition.containerDefinitions[0].image' --output text || echo "error")
        if [ "$result" == "error" ]; then
          echo "Failed to describe the task definition."
          exit 1
        fi
        TAG=$(echo $result | cut -d ':' -f 2)
        echo "::set-output name=tag::$TAG"

    # # フロントエンドのイメージタグを取得する
    # # 一時的にコメントアウト
    # - name: Get the latest Frontend image tag
    #   id: get-frontend-tag
    #   run: |
    #     set -e
    #     result=$(aws ecs describe-task-definition --task-definition tunetrail-frontend --query 'taskDefinition.containerDefinitions[0].image' --output text || echo "error")
    #     if [ "$result" == "error" ]; then
    #       echo "Failed to describe the task definition."
    #       exit 1
    #     fi
    #     TAG=$(echo $result | cut -d ':' -f 2)
    #     echo "::set-output name=tag::$TAG"

  # デプロイジョブ
  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # 以降のステップでAWS CLIを使用するため、AWSのクレデンシャル情報を設定する
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ECRにログインする (API)
    - name: Login to Amazon ECR (API)
      id: login-ecr-api
      uses: aws-actions/amazon-ecr-login@v1

    # APIのイメージをビルドしてECRにプッシュする
    - name: Build, tag, and push API image to Amazon ECR
      id: build-image-api
      # APIディレクトリ以下に変更があった場合のみビルドする
      if: contains(toJSON(github.event.commits.*.modified), 'api/')
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-api.outputs.registry }}
        ECR_REPOSITORY: "tunetrail-api"
        API_IMAGE_TAG: ${{ github.sha }} # コミットハッシュをタグとして使用
      run: |
        cd api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$API_IMAGE_TAG --target deploy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$API_IMAGE_TAG

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    # APIコンテナをデプロイする
    # フロントエンドのタグは現行のタスク定義から取得する (変更しない)
    # APIのタグはコミットハッシュを使用する
    - name: Terraform Apply (API only)
      # APIディレクトリ以下に変更があった場合のみデプロイする
      if: contains(toJSON(github.event.commits.*.modified), 'api/')
      run: |
        set -e
        terraform apply -auto-approve -var "frontend_image_tag=${{ needs.prepare-deployment.outputs.frontend_image_tag }}" -var "api_image_tag=${{ github.sha }}" -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: ${{ env.TF_WORKING_DIR }}

    # APIコンテナが起動したら、フロントエンドのイメージビルドとデプロイを行う
    # APIコンテナが起動するまで待機する
    # タイムアウトは10分
    - name: Wait for API to start
      run: |
        timeout 600 bash <<'EOF'
        while : ; do
            status=$(aws ecs describe-services --region ap-northeast-1 --cluster tunetrail --services tunetrail-api --query 'services[0].status' --output text)
            if [[ "$status" = "ACTIVE" ]]; then
                break
            fi
            echo "Waiting for service to become ACTIVE..."
            sleep 10
        done
        EOF

    # ECRにログインする (フロントエンド)
    - name: Login to Amazon ECR (Frontend)
      id: login-ecr-frontend
      uses: aws-actions/amazon-ecr-login@v1

    # フロントエンドのイメージをビルドしてECRにプッシュする
    - name: Build, tag, and push Frontend image to Amazon ECR
      id: build-image-frontend
      # # フロントエンドディレクトリ以下に変更があった場合のみビルドする
      # 一時的にコメントアウト
      # if: contains(toJSON(github.event.commits.*.modified), 'frontend/')
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-frontend.outputs.registry }}
        ECR_REPOSITORY: "tunetrail-frontend"
        IMAGE_TAG: ${{ github.sha }} # コミットハッシュをタグとして使用
        NEXT_PUBLIC_API_ROOT: "https://api.tune-trail.com"
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target deploy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # フロントエンドコンテナをデプロイする
    # APIのタグは現行のタスク定義から取得する (変更しない)
    # フロントエンドのタグはコミットハッシュを使用する
    - name: Terraform Apply (Frontend only)
      # フロントエンドディレクトリ以下に変更があった場合のみデプロイする
      # 一時的にコメントアウト
      # if: contains(toJSON(github.event.commits.*.modified), 'frontend/')
      run: terraform apply -auto-approve -var "frontend_image_tag=${{ github.sha }}" -var "api_image_tag=${{ needs.prepare-deployment.outputs.api_image_tag }}" -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: ${{ env.TF_WORKING_DIR }}
