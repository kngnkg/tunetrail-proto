name: Deploy Migration

on:
  push:
    branches:
      - "main"
    paths:
    - "database/**"
    - ".github/workflows/deploy-migration.yml"

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.4.6
  TF_WORKING_DIR: infra

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR (migration)
      id: login-ecr-migration
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push migration image to Amazon ECR
      id: build-image-migration
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-migration.outputs.registry }}
        ECR_REPOSITORY: "tunetrail-migration"
        IMAGE_TAG: ${{ github.sha }} # コミットハッシュをタグとして使用
      run: |
        cd database
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target deploy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Terraform backendのS3バケットにアクセスするため、AWSのクレデンシャル情報を設定する
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init

    - name: Get image tags
      working-directory: ${{ env.TF_WORKING_DIR }}
      id: image_tags
      # stderrの出力が混入するため、2>/dev/nullで破棄する
      run: |
        set -e
        terraform output -raw webapp_image_tag 2>/dev/null > webapp_image_tag.txt
        terraform output -raw restapi_image_tag 2>/dev/null > restapi_image_tag.txt
        echo "tag=$(<webapp_image_tag.txt)" >> $GITHUB_OUTPUT
        echo "tag=$(<restapi_image_tag.txt)" >> $GITHUB_OUTPUT

    # 先程pushしたイメージのタグをterraform applyに渡すことで、Lambda関数を更新する
    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform apply \
          -auto-approve \
          -var "webapp_image_tag=${{ steps.image_tags.outputs.webapp_tag }}" \
          -var "restapi_image_tag=${{ steps.image_tags.outputs.restapi_tag }}" \
          -var "migration_image_tag=${{ github.sha }}" \
          -var "db_password=${{ secrets.DB_PASSWORD }}"
