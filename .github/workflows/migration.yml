name: Migration

on:
  push:
    branches:
      - "main"
    paths:
    - "migration/**"
    - ".github/workflows/migration.yml"

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.4.6
  TF_WORKING_DIR: infra

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_changes.outputs.run_job }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # 全てのリビジョンを取得

    # migrationのデプロイが必要かどうかを判定する
    - name: Check migration should be deployed
      id: check_changes
      run: |
        set -e
        git fetch origin ${{ github.base_ref }}
        FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }} -- 'migration/*.go' 'migration/Dockerfile')
        if [[ -z "${FILES_CHANGED}" ]]; then
          echo "No changes in migration/ (*.go, Dockerfile), build, deploy and migration jobs will not be executed."
          echo "run_job=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in migration/ (*.go, Dockerfile), build, deploy and migration jobs will be executed."
          echo "run_job=true" >> $GITHUB_OUTPUT
        fi

  deploy:
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR (migration)
      id: login-ecr-migration
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push migration image to Amazon ECR
      id: build-image-migration
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-migration.outputs.registry }}
        ECR_REPOSITORY: "tunetrail-migration"
        IMAGE_TAG: ${{ github.sha }} # コミットハッシュをタグとして使用
      run: |
        cd migration
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target deploy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # webappのイメージタグを取得する
    - name: Get the latest webapp image tag
      id: get-webapp-tag
      run: |
        set -e
        result=$(aws ecs describe-task-definition --task-definition tunetrail-webapp --query 'taskDefinition.containerDefinitions[0].image' --output text || echo "error")
        if [ "$result" == "error" ]; then
          echo "Failed to describe the task definition."
          exit 1
        fi
        TAG=$(echo $result | cut -d ':' -f 2)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    # restapiのイメージタグを取得する
    - name: Get the latest restapi image tag
      id: get-restapi-tag
      run: |
        set -e
        result=$(aws ecs describe-task-definition --task-definition tunetrail-restapi --query 'taskDefinition.containerDefinitions[0].image' --output text || echo "error")
        if [ "$result" == "error" ]; then
          echo "Failed to describe the task definition."
          exit 1
        fi
        TAG=$(echo $result | cut -d ':' -f 2)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # 先程pushしたイメージのタグをterraform applyに渡すことで、Lambda関数を更新する
    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        set -e
        terraform init
        terraform apply \
          -auto-approve \
          -var "webapp_image_tag=${{ steps.get-webapp-tag.outputs.tag }}" \
          -var "restapi_image_tag=${{ steps.get-webapp-tag.outputs.tag }}" \
          -var "migration_image_tag=${{ github.sha }}" \
          -var "db_password=${{ secrets.DB_PASSWORD }}" \
          -var "db_schema_bucket_name=${{ secrets.TUNETRAIL_S3_BUCKET }}"

  migration:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Upload schema file
      run: |
        set -e
        aws s3 cp migration/_tools/postgres/schema.sql s3://${{ secrets.TUNETRAIL_S3_BUCKET }}/schema.sql

    - name: Invoke Lambda function
      run: |
        set -e
        output=$(aws lambda invoke --function-name migration_lambda --payload $(echo '{ "item": "schema.sql" }' | base64) response.json)
        if echo "$output" | grep -q "FunctionError"; then
          echo "Lambda function execution failed."
          echo "$output"
          exit 1
        fi
