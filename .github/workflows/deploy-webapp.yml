name: Deploy Webapp

on:
  push:
    branches:
      - "main"
    paths:
    - "webapp/**"
    - ".github/workflows/deploy-webapp.yml"

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.4.6
  TF_WORKING_DIR: infra

jobs:
  # デプロイ準備ジョブ
  # 現行のタスク定義からAPIのイメージタグを取得する
  prepare-deployment:
    runs-on: ubuntu-latest
    outputs:
      api_image_tag: ${{ steps.get-api-tag.outputs.tag }}
      webapp_image_tag: ${{ steps.get-webapp-tag.outputs.tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # 以降のステップでAWS CLIを使用するため、AWSのクレデンシャル情報を設定する
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # APIのイメージタグを取得する
    - name: Get the latest API image tag
      id: get-api-tag
      run: |
        set -e
        result=$(aws ecs describe-task-definition --task-definition tunetrail-api --query 'taskDefinition.containerDefinitions[0].image' --output text || echo "error")
        if [ "$result" == "error" ]; then
          echo "Failed to describe the task definition."
          exit 1
        fi
        TAG=$(echo $result | cut -d ':' -f 2)
        echo "::set-output name=tag::$TAG"

  # デプロイジョブ
  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # 以降のステップでAWS CLIを使用するため、AWSのクレデンシャル情報を設定する
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # APIコンテナが起動していることを確認する
    # タイムアウトは10分
    - name: Verify that the API is activated
      run: |
        timeout 600 bash <<'EOF'
        while : ; do
            status=$(aws ecs describe-services --region ap-northeast-1 --cluster tunetrail --services tunetrail-api --query 'services[0].status' --output text)
            if [[ "$status" = "ACTIVE" ]]; then
                break
            fi
            echo "Waiting for service to become ACTIVE..."
            sleep 10
        done
        EOF

    - name: Login to Amazon ECR (webapp)
      id: login-ecr-webapp
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate .env.production
      run: |
        echo NEXT_PUBLIC_API_ROOT=${{ secrets.NEXT_PUBLIC_API_ROOT }} > webapp/.env.production

    # イメージをビルドしてECRにプッシュする
    - name: Build, tag, and push webapp image to Amazon ECR
      id: build-image-webapp
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-webapp.outputs.registry }}
        ECR_REPOSITORY: "tunetrail-webapp"
        IMAGE_TAG: ${{ github.sha }} # コミットハッシュをタグとして使用
      run: |
        cd webapp
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --target deploy .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    # webappコンテナをデプロイする
    # APIのタグは現行のタスク定義から取得する (変更しない)
    # webappのタグはコミットハッシュを使用する
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "webapp_image_tag=${{ github.sha }}" -var "api_image_tag=${{ needs.prepare-deployment.outputs.api_image_tag }}" -var "db_password=${{ secrets.DB_PASSWORD }}"
      working-directory: ${{ env.TF_WORKING_DIR }}
