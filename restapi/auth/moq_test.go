// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	"sync"
)

// Ensure, that AuthProviderMock does implement AuthProvider.
// If this is not the case, regenerate this file with moq.
var _ AuthProvider = &AuthProviderMock{}

// AuthProviderMock is a mock implementation of AuthProvider.
//
//	func TestSomethingThatUsesAuthProvider(t *testing.T) {
//
//		// make and configure a mocked AuthProvider
//		mockedAuthProvider := &AuthProviderMock{
//			AdminInitiateAuthWithContextFunc: func(ctx context.Context, input *cognitoidentityprovider.AdminInitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
//				panic("mock out the AdminInitiateAuthWithContext method")
//			},
//			ConfirmSignUpWithContextFunc: func(ctx context.Context, input *cognitoidentityprovider.ConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
//				panic("mock out the ConfirmSignUpWithContext method")
//			},
//			SignUpWithContextFunc: func(ctx context.Context, input *cognitoidentityprovider.SignUpInput, opts ...request.Option) (*cognitoidentityprovider.SignUpOutput, error) {
//				panic("mock out the SignUpWithContext method")
//			},
//		}
//
//		// use mockedAuthProvider in code that requires AuthProvider
//		// and then make assertions.
//
//	}
type AuthProviderMock struct {
	// AdminInitiateAuthWithContextFunc mocks the AdminInitiateAuthWithContext method.
	AdminInitiateAuthWithContextFunc func(ctx context.Context, input *cognitoidentityprovider.AdminInitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error)

	// ConfirmSignUpWithContextFunc mocks the ConfirmSignUpWithContext method.
	ConfirmSignUpWithContextFunc func(ctx context.Context, input *cognitoidentityprovider.ConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error)

	// SignUpWithContextFunc mocks the SignUpWithContext method.
	SignUpWithContextFunc func(ctx context.Context, input *cognitoidentityprovider.SignUpInput, opts ...request.Option) (*cognitoidentityprovider.SignUpOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AdminInitiateAuthWithContext holds details about calls to the AdminInitiateAuthWithContext method.
		AdminInitiateAuthWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *cognitoidentityprovider.AdminInitiateAuthInput
			// Opts is the opts argument value.
			Opts []request.Option
		}
		// ConfirmSignUpWithContext holds details about calls to the ConfirmSignUpWithContext method.
		ConfirmSignUpWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *cognitoidentityprovider.ConfirmSignUpInput
			// Opts is the opts argument value.
			Opts []request.Option
		}
		// SignUpWithContext holds details about calls to the SignUpWithContext method.
		SignUpWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *cognitoidentityprovider.SignUpInput
			// Opts is the opts argument value.
			Opts []request.Option
		}
	}
	lockAdminInitiateAuthWithContext sync.RWMutex
	lockConfirmSignUpWithContext     sync.RWMutex
	lockSignUpWithContext            sync.RWMutex
}

// AdminInitiateAuthWithContext calls AdminInitiateAuthWithContextFunc.
func (mock *AuthProviderMock) AdminInitiateAuthWithContext(ctx context.Context, input *cognitoidentityprovider.AdminInitiateAuthInput, opts ...request.Option) (*cognitoidentityprovider.AdminInitiateAuthOutput, error) {
	if mock.AdminInitiateAuthWithContextFunc == nil {
		panic("AuthProviderMock.AdminInitiateAuthWithContextFunc: method is nil but AuthProvider.AdminInitiateAuthWithContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.AdminInitiateAuthInput
		Opts  []request.Option
	}{
		Ctx:   ctx,
		Input: input,
		Opts:  opts,
	}
	mock.lockAdminInitiateAuthWithContext.Lock()
	mock.calls.AdminInitiateAuthWithContext = append(mock.calls.AdminInitiateAuthWithContext, callInfo)
	mock.lockAdminInitiateAuthWithContext.Unlock()
	return mock.AdminInitiateAuthWithContextFunc(ctx, input, opts...)
}

// AdminInitiateAuthWithContextCalls gets all the calls that were made to AdminInitiateAuthWithContext.
// Check the length with:
//
//	len(mockedAuthProvider.AdminInitiateAuthWithContextCalls())
func (mock *AuthProviderMock) AdminInitiateAuthWithContextCalls() []struct {
	Ctx   context.Context
	Input *cognitoidentityprovider.AdminInitiateAuthInput
	Opts  []request.Option
} {
	var calls []struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.AdminInitiateAuthInput
		Opts  []request.Option
	}
	mock.lockAdminInitiateAuthWithContext.RLock()
	calls = mock.calls.AdminInitiateAuthWithContext
	mock.lockAdminInitiateAuthWithContext.RUnlock()
	return calls
}

// ConfirmSignUpWithContext calls ConfirmSignUpWithContextFunc.
func (mock *AuthProviderMock) ConfirmSignUpWithContext(ctx context.Context, input *cognitoidentityprovider.ConfirmSignUpInput, opts ...request.Option) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	if mock.ConfirmSignUpWithContextFunc == nil {
		panic("AuthProviderMock.ConfirmSignUpWithContextFunc: method is nil but AuthProvider.ConfirmSignUpWithContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.ConfirmSignUpInput
		Opts  []request.Option
	}{
		Ctx:   ctx,
		Input: input,
		Opts:  opts,
	}
	mock.lockConfirmSignUpWithContext.Lock()
	mock.calls.ConfirmSignUpWithContext = append(mock.calls.ConfirmSignUpWithContext, callInfo)
	mock.lockConfirmSignUpWithContext.Unlock()
	return mock.ConfirmSignUpWithContextFunc(ctx, input, opts...)
}

// ConfirmSignUpWithContextCalls gets all the calls that were made to ConfirmSignUpWithContext.
// Check the length with:
//
//	len(mockedAuthProvider.ConfirmSignUpWithContextCalls())
func (mock *AuthProviderMock) ConfirmSignUpWithContextCalls() []struct {
	Ctx   context.Context
	Input *cognitoidentityprovider.ConfirmSignUpInput
	Opts  []request.Option
} {
	var calls []struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.ConfirmSignUpInput
		Opts  []request.Option
	}
	mock.lockConfirmSignUpWithContext.RLock()
	calls = mock.calls.ConfirmSignUpWithContext
	mock.lockConfirmSignUpWithContext.RUnlock()
	return calls
}

// SignUpWithContext calls SignUpWithContextFunc.
func (mock *AuthProviderMock) SignUpWithContext(ctx context.Context, input *cognitoidentityprovider.SignUpInput, opts ...request.Option) (*cognitoidentityprovider.SignUpOutput, error) {
	if mock.SignUpWithContextFunc == nil {
		panic("AuthProviderMock.SignUpWithContextFunc: method is nil but AuthProvider.SignUpWithContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.SignUpInput
		Opts  []request.Option
	}{
		Ctx:   ctx,
		Input: input,
		Opts:  opts,
	}
	mock.lockSignUpWithContext.Lock()
	mock.calls.SignUpWithContext = append(mock.calls.SignUpWithContext, callInfo)
	mock.lockSignUpWithContext.Unlock()
	return mock.SignUpWithContextFunc(ctx, input, opts...)
}

// SignUpWithContextCalls gets all the calls that were made to SignUpWithContext.
// Check the length with:
//
//	len(mockedAuthProvider.SignUpWithContextCalls())
func (mock *AuthProviderMock) SignUpWithContextCalls() []struct {
	Ctx   context.Context
	Input *cognitoidentityprovider.SignUpInput
	Opts  []request.Option
} {
	var calls []struct {
		Ctx   context.Context
		Input *cognitoidentityprovider.SignUpInput
		Opts  []request.Option
	}
	mock.lockSignUpWithContext.RLock()
	calls = mock.calls.SignUpWithContext
	mock.lockSignUpWithContext.RUnlock()
	return calls
}
