// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package s3downloader

import (
	"context"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"io"
	"sync"
)

// Ensure, that DownloaderMock does implement Downloader.
// If this is not the case, regenerate this file with moq.
var _ Downloader = &DownloaderMock{}

// DownloaderMock is a mock implementation of Downloader.
//
//	func TestSomethingThatUsesDownloader(t *testing.T) {
//
//		// make and configure a mocked Downloader
//		mockedDownloader := &DownloaderMock{
//			DownloadWithContextFunc: func(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*s3manager.Downloader)) (int64, error) {
//				panic("mock out the DownloadWithContext method")
//			},
//		}
//
//		// use mockedDownloader in code that requires Downloader
//		// and then make assertions.
//
//	}
type DownloaderMock struct {
	// DownloadWithContextFunc mocks the DownloadWithContext method.
	DownloadWithContextFunc func(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*s3manager.Downloader)) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// DownloadWithContext holds details about calls to the DownloadWithContext method.
		DownloadWithContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// W is the w argument value.
			W io.WriterAt
			// Input is the input argument value.
			Input *s3.GetObjectInput
			// Options is the options argument value.
			Options []func(*s3manager.Downloader)
		}
	}
	lockDownloadWithContext sync.RWMutex
}

// DownloadWithContext calls DownloadWithContextFunc.
func (mock *DownloaderMock) DownloadWithContext(ctx context.Context, w io.WriterAt, input *s3.GetObjectInput, options ...func(*s3manager.Downloader)) (int64, error) {
	if mock.DownloadWithContextFunc == nil {
		panic("DownloaderMock.DownloadWithContextFunc: method is nil but Downloader.DownloadWithContext was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		W       io.WriterAt
		Input   *s3.GetObjectInput
		Options []func(*s3manager.Downloader)
	}{
		Ctx:     ctx,
		W:       w,
		Input:   input,
		Options: options,
	}
	mock.lockDownloadWithContext.Lock()
	mock.calls.DownloadWithContext = append(mock.calls.DownloadWithContext, callInfo)
	mock.lockDownloadWithContext.Unlock()
	return mock.DownloadWithContextFunc(ctx, w, input, options...)
}

// DownloadWithContextCalls gets all the calls that were made to DownloadWithContext.
// Check the length with:
//
//	len(mockedDownloader.DownloadWithContextCalls())
func (mock *DownloaderMock) DownloadWithContextCalls() []struct {
	Ctx     context.Context
	W       io.WriterAt
	Input   *s3.GetObjectInput
	Options []func(*s3manager.Downloader)
} {
	var calls []struct {
		Ctx     context.Context
		W       io.WriterAt
		Input   *s3.GetObjectInput
		Options []func(*s3manager.Downloader)
	}
	mock.lockDownloadWithContext.RLock()
	calls = mock.calls.DownloadWithContext
	mock.lockDownloadWithContext.RUnlock()
	return calls
}
